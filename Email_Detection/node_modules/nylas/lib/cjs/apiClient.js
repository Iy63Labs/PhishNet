"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const error_js_1 = require("./models/error.js");
const utils_js_1 = require("./utils.js");
const version_js_1 = require("./version.js");
/**
 * The API client for communicating with the Nylas API
 * @ignore Not for public use
 */
class APIClient {
    constructor({ apiKey, apiUri, timeout, headers }) {
        this.apiKey = apiKey;
        this.serverUrl = apiUri;
        this.timeout = timeout * 1000; // fetch timeout uses milliseconds
        this.headers = headers;
    }
    setRequestUrl({ overrides, path, queryParams, }) {
        const url = new URL(`${overrides?.apiUri || this.serverUrl}${path}`);
        return this.setQueryStrings(url, queryParams);
    }
    setQueryStrings(url, queryParams) {
        if (queryParams) {
            const snakeCaseParams = (0, utils_js_1.objKeysToSnakeCase)(queryParams, ['metadataPair']);
            for (const [key, value] of Object.entries(snakeCaseParams)) {
                if (key == 'metadataPair') {
                    // The API understands a metadata_pair filter in the form of:
                    // <key>:<value>
                    const metadataPair = [];
                    for (const item in value) {
                        metadataPair.push(`${item}:${value[item]}`);
                    }
                    url.searchParams.set('metadata_pair', metadataPair.join(','));
                }
                else {
                    url.searchParams.set(key, value);
                }
            }
        }
        return url;
    }
    setRequestHeaders({ headers, overrides, }) {
        const mergedHeaders = {
            ...headers,
            ...this.headers,
            ...overrides?.headers,
        };
        return {
            Accept: 'application/json',
            'User-Agent': `Nylas Node SDK v${version_js_1.SDK_VERSION}`,
            Authorization: `Bearer ${overrides?.apiKey || this.apiKey}`,
            ...mergedHeaders,
        };
    }
    async sendRequest(options) {
        const req = this.newRequest(options);
        const controller = new AbortController();
        const timeout = setTimeout(() => {
            controller.abort();
            throw new error_js_1.NylasSdkTimeoutError(req.url, this.timeout);
        }, this.timeout);
        try {
            const response = await (0, node_fetch_1.default)(req, { signal: controller.signal });
            clearTimeout(timeout);
            if (typeof response === 'undefined') {
                throw new Error('Failed to fetch response');
            }
            if (response.status > 299) {
                const text = await response.text();
                let error;
                try {
                    const parsedError = JSON.parse(text);
                    const camelCaseError = (0, utils_js_1.objKeysToCamelCase)(parsedError);
                    // Check if the request is an authentication request
                    const isAuthRequest = options.path.includes('connect/token') ||
                        options.path.includes('connect/revoke');
                    if (isAuthRequest) {
                        error = new error_js_1.NylasOAuthError(camelCaseError, response.status);
                    }
                    else {
                        error = new error_js_1.NylasApiError(camelCaseError, response.status);
                    }
                }
                catch (e) {
                    throw new Error(`Received an error but could not parse response from the server: ${text}`);
                }
                throw error;
            }
            return response;
        }
        catch (error) {
            clearTimeout(timeout);
            throw error;
        }
    }
    requestOptions(optionParams) {
        const requestOptions = {};
        requestOptions.url = this.setRequestUrl(optionParams);
        requestOptions.headers = this.setRequestHeaders(optionParams);
        requestOptions.method = optionParams.method;
        if (optionParams.body) {
            requestOptions.body = JSON.stringify((0, utils_js_1.objKeysToSnakeCase)(optionParams.body));
            requestOptions.headers['Content-Type'] = 'application/json';
        }
        if (optionParams.form) {
            requestOptions.body = optionParams.form;
            requestOptions.headers = {
                ...requestOptions.headers,
                ...optionParams.form.getHeaders(),
            };
        }
        return requestOptions;
    }
    newRequest(options) {
        const newOptions = this.requestOptions(options);
        return new node_fetch_1.Request(newOptions.url, {
            method: newOptions.method,
            headers: newOptions.headers,
            body: newOptions.body,
        });
    }
    async requestWithResponse(response) {
        const text = await response.text();
        try {
            const responseJSON = JSON.parse(text);
            return (0, utils_js_1.objKeysToCamelCase)(responseJSON);
        }
        catch (e) {
            throw new Error(`Could not parse response from the server: ${text}`);
        }
    }
    async request(options) {
        const response = await this.sendRequest(options);
        return this.requestWithResponse(response);
    }
    async requestRaw(options) {
        const response = await this.sendRequest(options);
        return response.buffer();
    }
    async requestStream(options) {
        const response = await this.sendRequest(options);
        return response.body;
    }
}
exports.default = APIClient;
